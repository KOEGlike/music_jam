cargo-features = ["codegen-backend"]

[package]
name = "music_jam"
version = "0.1.0"
edition = "2021"

[env]
LEPTOS_WASM_OPT_VERSION = "version_118"
LEPTOS_SASS_VERSION = "1.71.0"
RUST_BACKTRACE = "1"

[lib]
crate-type = ["cdylib", "rlib"]

[build]
rustflags = ["--cfg=web_sys_unstable_apis"]

[dependencies]
axum = { version = "0.7", optional = true, features = ["ws", "macros"] }
console_error_panic_hook = "0.1"
leptos = { version = "0.7", features = ["nightly"] }
leptos_axum = { version = "0.7", optional = true }
leptos_meta = "0.7"
leptos_router = "0.7"
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.5", optional = true, features = ["util"] }
tower-http = { version = "0.5", features = ["fs"], optional = true }
wasm-bindgen = "0.2.96"
thiserror = "1"
tracing = { version = "0.1", optional = true }
http = "1"
serde = { version = "1", features = ["derive"] }
rmp-serde = "1"
serde_json = { version = "1", optional = true }
leptos-use = "0.14"
rspotify = "0.13"
web-sys = { version = "0.3", features = [
    "Clipboard",
    "Window",
    "Navigator",
    "Permissions",
    'CanvasRenderingContext2d',
    'Document',
    'Element',
    'HtmlCanvasElement',
    'Window',
    "MediaDevices",
    "HtmlVideoElement",
    "HtmlImageElement",
    "MediaStream",
    "HtmlInputElement",
    "FileReader",
    "Blob",
] }
wasm-bindgen-futures = { version = "0.4" }
js-sys = { version = "=0.3.73" }
nestify = "0.3"
rust_spotify_web_playback_sdk = { git = "https://github.com/KOEGlike/rust_spotify_web_playback_sdk.git" }
gloo = { version = "0.11", features = ["storage"] }
cuid2 = "0.1"
sqlx = { version = "0.8", features = [
    "runtime-tokio",
    "postgres",
    "tls-native-tls",
    "default",
], optional = true }
dotenvy = { version = "0.15", optional = true }
reqwest = { version = "0.12", optional = true, features = ["native-tls"] }
chrono = { version = "0.4", optional = true }
icondata = "0.4"
futures = "0.3"
futures-util = "0.3"
qrcode = { version = "0.13" }
data-url = { version = "0.3", optional = true }
base64 = { version = "0.22", optional = true }
image = { version = "0.25.1", optional = true }
codee = { version = "0.2", features = ["msgpack_serde", "json_serde_wasm"] }
itertools = "0.13"
rand = "0.8"

[features]
hydrate = ["leptos/hydrate"]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:tracing",
    "leptos-use/ssr",
    "dep:sqlx",
    "dep:dotenvy",
    "dep:reqwest",
    "dep:serde_json",
    "dep:chrono",
    "dep:data-url",
    "dep:base64",
    "dep:image",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 1
[profile.dev.package."*"]
opt-level = 3

[unstable]
codegen-backend = true
[profile.server-dev]
inherits = "dev"
codegen-backend = "cranelift"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "music_jam"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"


# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "PROD"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
